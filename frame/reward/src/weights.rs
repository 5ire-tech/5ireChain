
//! Autogenerated weights for `pallet_reward`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-07-29, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `arunjot-ATR592`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/substrate-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_reward
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// substrate/frame/reward/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn get_rewards() -> Weight;
}

/// Weight functions for `pallet_reward`.
pub struct SubstrateWeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeightInfo<T> {
	/// Storage: `Reward::ValidatorRewardAccounts` (r:1 w:0)
	/// Proof: `Reward::ValidatorRewardAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reward::EraRewardsVault` (r:1 w:1)
	/// Proof: `Reward::EraRewardsVault` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn get_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `199`
		//  Estimated: `3664`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3664))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

impl WeightInfo for () {
	/// Storage: `Reward::ValidatorRewardAccounts` (r:1 w:0)
	/// Proof: `Reward::ValidatorRewardAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reward::EraRewardsVault` (r:1 w:1)
	/// Proof: `Reward::EraRewardsVault` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn get_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `199`
		//  Estimated: `3664`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3664))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}